// @generated
/* eslint-disable */

import { ATN } from 'antlr4ts/atn/ATN';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { Vocabulary } from 'antlr4ts/Vocabulary';
export declare class PLLexer extends Lexer {
  static readonly IMPORT = 1;
  static readonly FROM = 2;
  static readonly CLASS = 3;
  static readonly VAL = 4;
  static readonly FUNCTION = 5;
  static readonly METHOD = 6;
  static readonly AS = 7;
  static readonly PRIVATE = 8;
  static readonly PROTECTED = 9;
  static readonly INTERNAL = 10;
  static readonly PUBLIC = 11;
  static readonly IF = 12;
  static readonly THEN = 13;
  static readonly ELSE = 14;
  static readonly MATCH = 15;
  static readonly PANIC = 16;
  static readonly RETURN = 17;
  static readonly INT = 18;
  static readonly STRING = 19;
  static readonly BOOL = 20;
  static readonly UNIT = 21;
  static readonly TRUE = 22;
  static readonly FALSE = 23;
  static readonly THIS = 24;
  static readonly WILDCARD = 25;
  static readonly STRING2INT = 26;
  static readonly INT2STRING = 27;
  static readonly PRINTLN = 28;
  static readonly SELF = 29;
  static readonly CONST = 30;
  static readonly LET = 31;
  static readonly VAR = 32;
  static readonly TYPE = 33;
  static readonly INTERFACE = 34;
  static readonly FUNCTOR = 35;
  static readonly EXTENDS = 36;
  static readonly IMPLEMENTS = 37;
  static readonly EXPORT = 38;
  static readonly ASSERT = 39;
  static readonly LPAREN = 40;
  static readonly RPAREN = 41;
  static readonly LBRACE = 42;
  static readonly RBRACE = 43;
  static readonly LBRACKET = 44;
  static readonly RBRACKET = 45;
  static readonly QUESTION = 46;
  static readonly SEMICOLON = 47;
  static readonly COLON = 48;
  static readonly COLONCOLON = 49;
  static readonly COMMA = 50;
  static readonly DOT = 51;
  static readonly BAR = 52;
  static readonly ARROW = 53;
  static readonly ASSIGN = 54;
  static readonly NOT = 55;
  static readonly MUL = 56;
  static readonly DIV = 57;
  static readonly MOD = 58;
  static readonly PLUS = 59;
  static readonly MINUS = 60;
  static readonly STRUCT_EQ = 61;
  static readonly LT = 62;
  static readonly LE = 63;
  static readonly GT = 64;
  static readonly GE = 65;
  static readonly STRUCT_NE = 66;
  static readonly AND = 67;
  static readonly OR = 68;
  static readonly SPREAD = 69;
  static readonly LowerId = 70;
  static readonly UpperId = 71;
  static readonly MinInt = 72;
  static readonly IntLiteral = 73;
  static readonly StrLiteral = 74;
  static readonly HexLiteral = 75;
  static readonly DecimalLiteral = 76;
  static readonly OctalLiteral = 77;
  static readonly COMMENT = 78;
  static readonly WS = 79;
  static readonly LINE_COMMENT = 80;
  static readonly channelNames: string[];
  static readonly modeNames: string[];
  static readonly ruleNames: string[];
  private static readonly _LITERAL_NAMES;
  private static readonly _SYMBOLIC_NAMES;
  static readonly VOCABULARY: Vocabulary;
  get vocabulary(): Vocabulary;
  constructor(input: CharStream);
  get grammarFileName(): string;
  get ruleNames(): string[];
  get serializedATN(): string;
  get channelNames(): string[];
  get modeNames(): string[];
  private static readonly _serializedATNSegments;
  private static readonly _serializedATNSegment0;
  private static readonly _serializedATNSegment1;
  static readonly _serializedATN: string;
  static __ATN: ATN;
  static get _ATN(): ATN;
}
