import { Comparable } from std.interfaces;
import { List } from std.list;
import { Option } from std.option;
import { Pair, Triple, Tuple4 } from std.tuples;

private class NodeEnumerationHelper<K: Comparable<K>, V>(
  End,
  More(K, V, Map<K, V>, NodeEnumerationHelper<K, V>)
) {
  method cons(map: Map<K, V>): NodeEnumerationHelper<K, V> =
    match map {
      Empty -> this,
      Leaf(k, v) -> NodeEnumerationHelper.More(k, v, Map.empty<K, V>(), this),
      Node(_, k, v, l, r) -> NodeEnumerationHelper.More(k, v, r, this).cons(l),
    }
}

// Adapted from https://github.com/facebook/flow/
// See src/hack_forked/utils/collections/third-party/flow_map.ml
class Map<K: Comparable<K>, V>(Empty, Leaf(K, V), Node(int, K, V, Map<K, V>, Map<K, V>)) {
  function <K: Comparable<K>, V> empty(): Map<K, V> = Map.Empty()

  function <K: Comparable<K>, V> singleton(key: K, value: V): Map<K, V> = Map.Leaf(key, value)

  method isEmpty(): bool =
    match this {
      Empty -> true,
      Leaf(_, _) -> false,
      Node(_, _, _, _, _) -> false,
    }

  method get(key: K): Option<V> =
    match this {
      Empty -> Option.None(),
      Leaf(k, v) -> if k.compare(key) == 0 { Option.Some(v) } else { Option.None() },
      Node(_, k, v, l, r) -> {
        let c = key.compare(k);
        if c == 0 { Option.Some(v) } else if c < 0 { l.get(key) } else { r.get(key) }
      },
    }

  method containsKey(key: K): bool =
    match this {
      Empty -> false,
      Leaf(k, v) -> k.compare(key) == 0,
      Node(_, k, v, l, r) -> {
        let c = key.compare(k);
        c == 0 || (if c < 0 { l.containsKey(key) } else { r.containsKey(key) })
      },
    }

  method insert(key: K, value: V): Map<K, V> =
    match this {
      Empty -> Map.singleton(key, value),
      Leaf(k, v) -> {
        let c = key.compare(k);
        if c == 0 {
          if v == value { this } else { Map.Leaf(k, value) }
        } else if c < 0 {
          this.sortedTwoNodesSmaller(key, value)
        } else {
          this.sortedTwoNodesLarger(key, value)
        }
      },
      Node(h, k, v, l, r) -> {
        let c = key.compare(k);
        if c == 0 {
          if v == value { this } else { Map.Node(h, k, value, l, r) }
        } else if c < 0 {
          let ll = l.insert(key, value);
          if l == ll { this } else { Map.balanced(ll, k, v, r) }
        } else {
          let rr = r.insert(key, value);
          if r == rr { this } else { Map.balanced(l, k, v, rr) }
        }
      },
    }

  method split(key: K): Triple<Map<K, V>, Option<V>, Map<K, V>> =
    match this {
      Empty -> (Map.empty<K, V>(), Option.None<V>(), Map.empty<K, V>()),
      Leaf(k, v) -> {
        let c = key.compare(k);
        if c == 0 {
          (Map.empty<K, V>(), Option.Some(v), Map.empty<K, V>())
        } else if c < 0 {
          (Map.empty<K, V>(), Option.None<V>(), this)
        } else {
          (this, Option.None<V>(), Map.empty<K, V>())
        }
      },
      Node(_, k, v, l, r) -> {
        let c = key.compare(k);
        if c == 0 {
          (l, Option.Some(v), r)
        } else if c < 0 {
          let (ll, pres, rl) = l.split(key);
          (ll, pres, Map.join(rl, k, v, r))
        } else {
          let (lr, pres, rr) = r.split(key);
          (Map.join(l, k, v, lr), pres, rr)
        }
      },
    }

  method <V2, V3> merge(other: Map<K, V2>, f: (K, Option<V>, Option<V2>) -> Option<V3>): Map<
    K,
    V3
  > =
    match (this, other) {
      (Empty, Empty) -> Map.empty(),
      (Leaf(k, v), Empty) -> {
        match f(k, Option.Some(v), Option.None()) {
          None -> Map.empty(),
          Some(data) -> Map.Leaf(k, data),
        }
      },
      (Empty, Leaf(k, v)) -> {
        match f(k, Option.None(), Option.Some(v)) {
          None -> Map.empty(),
          Some(data) -> Map.Leaf(k, data),
        }
      },
      (Leaf(k1, v1), Leaf(_, _)) -> {
        let (l2, v2, r2) = other.split(k1);
        Map.concatOrJoin(
          Map.empty<K, V>().merge(l2, f),
          k1,
          f(k1, Option.Some(v1), v2),
          Map.empty<K, V>().merge(r2, f)
        )
      },
      (Node(h1, k1, v1, l1, r1), _) -> {
        if h1 >= other.height() {
          let (l2, v2, r2) = other.split(k1);
          Map.concatOrJoin(l1.merge(l2, f), k1, f(k1, Option.Some(v1), v2), r1.merge(r2, f))
        } else {
          Process.panic("Invalid state")
        }
      },
      (_, Node(_, k2, v2, l2, r2)) -> {
        let (l1, v1, r1) = this.split(k2);
        Map.concatOrJoin(l1.merge(l2, f), k2, f(k2, v1, Option.Some(v2)), r1.merge(r2, f))
      },
    }

  method update(key: K, f: (Option<V>) -> Option<V>): Map<K, V> =
    match this {
      Empty -> match f(Option.None()) {
        None -> Map.empty(),
        Some(v) -> Map.singleton(key, v),
      },
      Leaf(k, v) -> {
        let c = key.compare(k);
        if c == 0 {
          match f(Option.Some(v)) {
            None -> Map.empty(),
            Some(data) -> { if v == data { this } else { Map.Leaf(key, data) } },
          }
        } else {
          match f(Option.None()) {
            None -> this,
            Some(data) -> if c < 0 {
              this.sortedTwoNodesSmaller(key, data)
            } else {
              this.sortedTwoNodesLarger(key, data)
            },
          }
        }
      },
      Node(h, k, v, l, r) -> {
        let c = key.compare(k);
        if c == 0 {
          match f(Option.Some(v)) {
            None -> Map.internalMerge(l, r),
            Some(data) -> if v == data { this } else { Map.Node(h, key, data, l, r) },
          }
        } else if c < 0 {
          let ll = l.update(key, f);
          if l == ll { this } else { Map.balanced(ll, k, v, r) }
        } else {
          let rr = r.update(key, f);
          if r == rr { this } else { Map.balanced(l, k, v, rr) }
        }
      },
    }

  method customizedUnion(other: Map<K, V>, f: (K, V, V) -> Option<V>): Map<K, V> =
    match (this, other) {
      (Empty, _) -> other,
      (_, Empty) -> this,
      (s, Leaf(k, v)) -> s.update(
        k,
        (d) -> match d {
          None -> Option.Some(v),
          Some(v2) -> f(k, v2, v),
        }
      ),
      (Leaf(k, v), s) -> s.update(
        k,
        (d) -> match d {
          None -> Option.Some(v),
          Some(v2) -> f(k, v, v2),
        }
      ),
      (Node(h1, k1, v1, l1, r1), Node(h2, k2, v2, l2, r2)) -> {
        if h1 >= h2 {
          let (l2New, d, r2New) = other.split(k1);
          let l = l1.customizedUnion(l2New, f);
          let r = r1.customizedUnion(r2New, f);
          match d {
            None -> Map.join(l, k1, v1, r),
            Some(v2New) -> Map.concatOrJoin(l, k1, f(k1, v1, v2New), r),
          }
        } else {
          let (l1New, d, r1New) = other.split(k1);
          let l = l1New.customizedUnion(l2, f);
          let r = r1New.customizedUnion(r2, f);
          match d {
            None -> Map.join(l, k1, v1, r),
            Some(v1New) -> Map.concatOrJoin(l, k1, f(k1, v1New, v2), r),
          }
        }
      },
    }

  private function <K: Comparable<K>, V> defaultUnionMerger(key: K, v1: V, v2: V): Option<V> =
    Option.Some(v1)

  method union(other: Map<K, V>): Map<K, V> = this.customizedUnion(other, Map.defaultUnionMerger)

  /** When failed to remove, the original map is returned */
  method remove(key: K): Map<K, V> =
    match this {
      Empty -> this,
      Leaf(k, _) -> if key.compare(k) == 0 { Map.empty() } else { this },
      Node(_, k, v, l, r) -> {
        let c = key.compare(k);
        if c == 0 {
          Map.internalMerge(l, r)
        } else if c < 0 {
          let ll = l.remove(key);
          if l == ll { this } else { Map.balanced(ll, k, v, r) }
        } else {
          let rr = r.remove(key);
          if r == rr { this } else { Map.balanced(l, k, v, rr) }
        }
      },
    }

  method compare(other: Map<K, V>, f: (V, V) -> int): int =
    Map.compareHelper(
      f,
      NodeEnumerationHelper.End<K, V>().cons(this),
      NodeEnumerationHelper.End<K, V>().cons(other)
    )

  private function <K: Comparable<K>, V> compareHelper(
    f: (V, V) -> int,
    e1: NodeEnumerationHelper<K, V>,
    e2: NodeEnumerationHelper<K, V>
  ): int =
    match (e1, e2) {
      (End, End) -> 0,
      (End, _) -> -1,
      (_, End) -> 1,
      (More(k1, v1, r1, e1Nested), More(k2, v2, r2, e2Nested)) -> {
        let c = k1.compare(k2);
        if c != 0 {
          c
        } else {
          let c1 = f(v1, v2);
          if c1 != 0 { c } else { Map.compareHelper(f, e1Nested.cons(r1), e2Nested.cons(r2)) }
        }
      },
    }

  method equal(other: Map<K, V>, f: (V, V) -> bool): bool =
    Map.equalHelper(
      f,
      NodeEnumerationHelper.End<K, V>().cons(this),
      NodeEnumerationHelper.End<K, V>().cons(other)
    )

  private function <K: Comparable<K>, V> equalHelper(
    f: (V, V) -> bool,
    e1: NodeEnumerationHelper<K, V>,
    e2: NodeEnumerationHelper<K, V>
  ): bool =
    match (e1, e2) {
      (End, End) -> true,
      (End, _) -> false,
      (_, End) -> false,
      (More(k1, v1, r1, e1Nested), More(k2, v2, r2, e2Nested)) -> {
        k1.compare(k2) == 0 && f(v1, v2) && Map.equalHelper(f, e1Nested.cons(r1), e2Nested.cons(r2))
      },
    }

  method iter(f: (K, V) -> unit): unit =
    match this {
      Empty -> {  },
      Leaf(k, v) -> f(k, v),
      Node(_, k, v, l, r) -> {
        let _ = l.iter(f);
        let _ = f(k, v);
        let _ = r.iter(f);
      },
    }

  method <A> fold(acc: A, f: (A, K, V) -> A): A =
    match this {
      Empty -> acc,
      Leaf(k, v) -> f(acc, k, v),
      Node(_, k, v, l, r) -> r.fold(f(l.fold(acc, f), k, v), f),
    }

  method forAll(f: (K, V) -> bool): bool =
    match this {
      Empty -> true,
      Leaf(k, v) -> f(k, v),
      Node(_, k, v, l, r) -> f(k, v) && l.forAll(f) && r.forAll(f),
    }

  method exists(f: (K, V) -> bool): bool =
    match this {
      Empty -> true,
      Leaf(k, v) -> f(k, v),
      Node(_, k, v, l, r) -> f(k, v) || l.exists(f) || r.exists(f),
    }

  method filter(f: (K, V) -> bool): Map<K, V> =
    match this {
      Empty -> Map.Empty(),
      Leaf(k, v) -> if f(k, v) { this } else { Map.empty() },
      Node(_, k, v, l, r) -> {
        let newL = l.filter(f);
        let keepCurrentVal = f(k, v);
        let newR = r.filter(f);
        if keepCurrentVal {
          if l == newL && r == newR { this } else { Map.join(newL, k, v, newR) }
        } else {
          Map.concat(newL, newR)
        }
      },
    }

  method partition(f: (K, V) -> bool): Pair<Map<K, V>, Map<K, V>> =
    match this {
      Empty -> (Map.empty<K, V>(), Map.empty<K, V>()),
      Leaf(k, v) -> if f(k, v) { (this, Map.empty<K, V>()) } else { (Map.empty<K, V>(), this) },
      Node(_, k, v, l, r) -> {
        let (lt, lf) = l.partition(f);
        let currentNodeToTrue = f(k, v);
        let (rt, rf) = r.partition(f);
        if currentNodeToTrue {
          (Map.join(lt, k, v, rt), Map.concat(lf, rf))
        } else {
          (Map.concat(lt, rt), Map.join(lf, k, v, rf))
        }
      },
    }

  method size(): int =
    match this {
      Empty -> 0,
      Leaf(_, _) -> 1,
      Node(_, _, _, l, r) -> l.size() + 1 + r.size(),
    }

  method entries(): List<Pair<K, V>> = this.entriesHelper(List.nil())

  private method entriesHelper(acc: List<Pair<K, V>>): List<Pair<K, V>> =
    match this {
      Empty -> acc,
      Leaf(k, v) -> List.Cons((k, v), acc),
      Node(_, k, v, l, r) -> l.entriesHelper(List.Cons((k, v), r.entriesHelper(acc))),
    }

  method min(): Option<Pair<K, V>> =
    match this {
      Empty -> Option.None(),
      Leaf(k, v) -> Option.Some((k, v)),
      Node(_, k, v, child, _) -> if child.isEmpty() { Option.Some((k, v)) } else { child.min() },
    }

  method max(): Option<Pair<K, V>> =
    match this {
      Empty -> Option.None(),
      Leaf(k, v) -> Option.Some((k, v)),
      Node(_, k, v, _, child) -> if child.isEmpty() { Option.Some((k, v)) } else { child.min() },
    }

  method minKey(): Option<K> = this.min().map((it) -> it.e0)

  method maxKey(): Option<K> = this.max().map((it) -> it.e0)

  /** Return ordered keys */
  method keys(): List<K> = this.keysHelper(List.nil())

  private method keysHelper(acc: List<K>): List<K> =
    match this {
      Empty -> acc,
      Leaf(k, _) -> List.Cons(k, acc),
      Node(_, k, _, l, r) -> l.keysHelper(List.Cons(k, r.keysHelper(acc))),
    }

  method <V2> map(f: (K, V) -> V2): Map<K, V2> =
    match this {
      Empty -> Map.Empty(),
      Leaf(k, v) -> Map.Leaf(k, f(k, v)),
      Node(h, k, v, l, r) -> { Map.Node(h, k, f(k, v), l.map(f), r.map(f)) },
    }

  private method height(): int =
    match this {
      Empty -> 0,
      Leaf(_, _) -> 1,
      Node(h, _, _, _, _) -> h,
    }

  private method sortedTwoNodesLarger(k: K, v: V): Map<K, V> =
    Map.Node(2, k, v, this, Map.Empty<K, V>())

  private method sortedTwoNodesSmaller(k: K, v: V): Map<K, V> =
    Map.Node(2, k, v, Map.Empty<K, V>(), this)

  private function <K: Comparable<K>, V> create(
    left: Map<K, V>,
    key: K,
    value: V,
    right: Map<K, V>
  ): Map<K, V> = {
    let lh = left.height();
    let rh = right.height();
    let h = if lh >= rh { lh + 1 } else { rh + 1 };
    if h == 1 { Map.singleton(key, value) } else { Map.Node(h, key, value, left, right) }
  }

  /* The result can not be leaf */
  private function <K: Comparable<K>, V> node(
    left: Map<K, V>,
    key: K,
    value: V,
    right: Map<K, V>
  ): Map<K, V> = {
    let lh = left.height();
    let rh = right.height();
    let h = if lh >= rh { lh + 1 } else { rh + 1 };
    Map.Node(h, key, value, left, right)
  }

  private method forcedNodeWithoutHeight(): Tuple4<K, V, Map<K, V>, Map<K, V>> =
    match this {
      Empty -> Process.panic("Bad tree"),
      Leaf(_, _) -> Process.panic("Bad tree"),
      Node(_, k, v, l, r) -> (k, v, l, r),
    }

  private function <K: Comparable<K>, V> balanced(l: Map<K, V>, k: K, v: V, r: Map<K, V>): Map<
    K,
    V
  > = {
    let lh = l.height();
    let rh = r.height();
    if lh > rh + 2 {
      let (lk, lv, ll, lr) = l.forcedNodeWithoutHeight();
      if ll.height() >= lr.height() {
        Map.node(ll, lk, lv, Map.create(lr, k, v, r))
      } else {
        let (lrk, lrv, lrl, lrr) = lr.forcedNodeWithoutHeight();
        Map.node(Map.create(ll, lk, lv, lrl), lrk, lrv, Map.create(lrr, k, v, r))
      }
    } else if rh > lh + 2 {
      let (rk, rv, rl, rr) = r.forcedNodeWithoutHeight();
      if rr.height() >= rl.height() {
        Map.node(Map.create(l, k, v, rl), rk, rv, rr)
      } else {
        let (rlk, rlv, rll, rlr) = rl.forcedNodeWithoutHeight();
        Map.node(Map.create(l, k, v, rll), rlk, rlv, Map.create(rlr, rk, rv, rr))
      }
    } else {
      Map.create(l, k, v, r)
    }
  }

  private method minBindingFromNodeUnsafe(): Pair<K, V> = {
    let (k, v, l, _) = this.forcedNodeWithoutHeight();
    match l {
      Empty -> (k, v),
      Leaf(k1, v1) -> (k1, v1),
      Node(_, _, _, l1, _) -> l1.minBindingFromNodeUnsafe(),
    }
  }

  private method removeMinBindingFromNodeUnsafe(): Map<K, V> = {
    let (k, v, l, r) = this.forcedNodeWithoutHeight();
    match l {
      Empty -> r,
      Leaf(_, _) -> Map.balanced(Map.empty<K, V>(), k, v, r),
      Node(_, _, _, _, _) -> Map.balanced(l.removeMinBindingFromNodeUnsafe(), k, v, r),
    }
  }

  /*
   * Beware: those 4 functions assume that the added k is *strictly* smaller (or bigger) than all
   * the present keys in the tree; it does not test for equality with the current min (or max) key.
   * Indeed, they are only used during the "join" operation which respects this precondition.
   */
  private function <K: Comparable<K>, V> addMinNode(node: Map<K, V>, tree: Map<K, V>): Map<K, V> =
    match tree {
      Empty -> node,
      Leaf(k, v) -> node.sortedTwoNodesLarger(k, v),
      Node(_, k, v, l, r) -> Map.balanced(Map.addMinNode(node, l), k, v, r),
    }

  private function <K: Comparable<K>, V> addMinBinding(newK: K, newV: V, tree: Map<K, V>): Map<
    K,
    V
  > =
    match tree {
      Empty -> Map.singleton(newK, newV),
      Leaf(_, _) -> tree.sortedTwoNodesSmaller(newK, newV),
      Node(_, k, v, l, r) -> Map.balanced(Map.addMinBinding(newK, newV, l), k, v, r),
    }

  private function <K: Comparable<K>, V> addMaxNode(node: Map<K, V>, tree: Map<K, V>): Map<K, V> =
    match tree {
      Empty -> node,
      Leaf(k, v) -> node.sortedTwoNodesSmaller(k, v),
      Node(_, k, v, l, r) -> Map.balanced(l, k, v, Map.addMaxNode(node, r)),
    }

  private function <K: Comparable<K>, V> addMaxBinding(newK: K, newV: V, tree: Map<K, V>): Map<
    K,
    V
  > =
    match tree {
      Empty -> Map.singleton(newK, newV),
      Leaf(_, _) -> tree.sortedTwoNodesLarger(newK, newV),
      Node(_, k, v, l, r) -> Map.balanced(l, k, v, Map.addMaxBinding(newK, newV, r)),
    }

  private function <K: Comparable<K>, V> internalMerge(t1: Map<K, V>, t2: Map<K, V>): Map<K, V> =
    match (t1, t2) {
      (Empty, t) -> t,
      (t, Empty) -> t,
      (Leaf(_, _), t) -> Map.addMinNode(t1, t),
      (t, Leaf(_, _)) -> Map.addMaxNode(t2, t),
      (Node(_, _, _, _, _), Node(_, _, _, _, _)) -> {
        let (k, v) = t2.minBindingFromNodeUnsafe();
        Map.balanced(t1, k, v, t2.removeMinBindingFromNodeUnsafe())
      },
    }

  // Same as create and bal, but no assumptions are made on the relative heights of l and r
  private function <K: Comparable<K>, V> join(l: Map<K, V>, k: K, v: V, r: Map<K, V>): Map<K, V> =
    match (l, r) {
      (Empty, _) -> Map.addMinBinding(k, v, r),
      (_, Empty) -> Map.addMaxBinding(k, v, l),
      (Leaf(_, _), Leaf(_, _)) -> Map.Node(2, k, v, l, r),
      (Leaf(_, _), Node(rh, rk, rv, rl, rr)) -> if rh > 3 {
        Map.balanced(Map.join(l, k, v, rl), rk, rv, rr)
      } else {
        Map.create(l, k, v, r)
      },
      (Node(lh, lk, lv, ll, lr), Leaf(_, _)) -> if lh > 3 {
        Map.balanced(ll, lk, lv, Map.join(lr, k, v, r))
      } else {
        Map.create(l, k, v, r)
      },
      (Node(lh, lk, lv, ll, lr), Node(rh, rk, rv, rl, rr)) -> {
        if lh > rh + 2 {
          Map.balanced(ll, lk, lv, Map.join(lr, k, v, r))
        } else if rh > lh + 2 {
          Map.balanced(Map.join(l, k, v, rl), rk, rv, rr)
        } else {
          Map.create(l, k, v, r)
        }
      },
    }

  /*
   * Merge two trees l and r into one. All elements of l must precede the elements of r. No
   * assumption on the heights of l and r.
   */
  private function <K: Comparable<K>, V> concat(t1: Map<K, V>, t2: Map<K, V>): Map<K, V> =
    match (t1, t2) {
      (Empty, t) -> t,
      (t, Empty) -> t,
      (Leaf(_, _), t) -> Map.addMinNode(t1, t),
      (t, Leaf(_, _)) -> Map.addMaxNode(t2, t),
      (Node(_, _, _, _, _), Node(_, _, _, _, _)) -> {
        let (k, v) = t2.minBindingFromNodeUnsafe();
        Map.join(t1, k, v, t2.removeMinBindingFromNodeUnsafe())
      },
    }

  private function <K: Comparable<K>, V> concatOrJoin(
    t1: Map<K, V>,
    k: K,
    vOpt: Option<V>,
    t2: Map<K, V>
  ): Map<K, V> =
    match vOpt {
      Some(v) -> Map.join(t1, k, v, t2),
      None -> Map.concat(t1, t2),
    }
}
