// ERROR_COUNT: 12
// UnexpectedType:25:35-25:45: Expected: `() -> int`, actual: `() -> Box<__UNDECIDED__>`.
// UnexpectedType:26:30-26:40: Expected: `() -> int`, actual: `() -> Box<__UNDECIDED__>`.
// UnexpectedType:27:37-27:47: Expected: `() -> int`, actual: `() -> Box<__UNDECIDED__>`.
// UnexpectedType:28:47-28:49: Expected: `Box<__UNDECIDED__>`, actual: `int`.
// UnexpectedType:29:31-29:41: Expected: `() -> bool`, actual: `() -> Box<__UNDECIDED__>`.
// UnexpectedType:30:40-30:50: Expected: `() -> bool`, actual: `() -> Box<__UNDECIDED__>`.
// UnexpectedType:31:35-31:40: Expected: `int`, actual: `bool`.
// UnexpectedType:32:30-32:35: Expected: `int`, actual: `bool`.
// UnexpectedType:32:38-32:43: Expected: `int`, actual: `bool`.
// UnexpectedType:34:48-34:55: Expected: `(int) -> Box<bool>`, actual: `(__UNDECIDED__) -> Box<__UNDECIDED__>`.
// UnexpectedType:37:47-37:64: Expected: `() -> Box<__UNDECIDED__>`, actual: `() -> AnotherBox<__UNDECIDED__>`.
// UnexpectedType:40:42-40:49: Expected: `(Box<Box<bool>>) -> Box<Box<Box<int>>>`, actual: `(__UNDECIDED__) -> Box<__UNDECIDED__>`.

class Box<T>(value: T) {
    public function <T> empty(): Box<T> = { value: panic("PANIC") }
    public function <T> of(value: T): Box<T> = { value }
}

class AnotherBox<T>(value: T) {
    public function <T> empty(): AnotherBox<T> = { value: panic("PANIC") }
}

util Main {
    function test01(): int = 42 + Box::empty()
    function test02(): int = Box::empty() + 42
    function test03(): bool = 42 == Box::empty()
    function test04(): bool = Box::empty() == 42
    function test05(): bool = Box::empty() || false
    function test06(): bool = false || Box::empty()
    function test07(): int = 42 * false
    function test08(): int = false + false
    function test09(): bool = Box::of(true) == Box::of(false)
    function test10(): bool = Box::of(true) == Box::of(42)
    function test11(): bool = Box::of(true) == Box::empty()
    function test12(): bool = Box::empty() == Box::of(42)
    function test13(): bool = Box::empty() == AnotherBox::empty()
    function test14(): bool =
        // Deeply nested type inconsistencies
        Box::of(Box::of(Box::of(42))) == Box::of(Box::of(Box::of(false)))
}
