import lexSamlangProgram, { samlangTokenToString } from '../samlang-lexer';

const lex = (source: string): readonly string[] =>
  lexSamlangProgram(source).map(samlangTokenToString);

it('lexSamlangProgram good test 0', () => {
  expect(lex('val l = List.of("SAMLANG").cons("...")')).toEqual([
    '1:1-1:4: val',
    '1:5-1:6: l',
    '1:7-1:8: =',
    '1:9-1:13: List',
    '1:13-1:14: .',
    '1:14-1:16: of',
    '1:16-1:17: (',
    '1:17-1:26: "SAMLANG"',
    '1:26-1:27: )',
    '1:27-1:28: .',
    '1:28-1:32: cons',
    '1:32-1:33: (',
    '1:33-1:38: "..."',
    '1:38-1:39: )',
  ]);
});

it('lexSamlangProgram good test 1', () => {
  expect(
    lex(`
class Main {
  function main(): unit = {
    val i: int = 1;
    val j: int = 2;
    if ((i < j && i > 0) && j > 0) then {
      val a: int = 3;
      val b: int = 4;
      if (a > b || a + b > 0 && true) then println("one") else println("two")
    } else {
      val a: int = 3;
      val b: int = 4;
      if (a == 2 || b == 4) then { println("three") } else { println("four") }
    }
  }

}
`)
  ).toEqual([
    '2:1-2:6: class',
    '2:7-2:11: Main',
    '2:12-2:13: {',
    '3:3-3:11: function',
    '3:12-3:16: main',
    '3:16-3:17: (',
    '3:17-3:18: )',
    '3:18-3:19: :',
    '3:20-3:24: unit',
    '3:25-3:26: =',
    '3:27-3:28: {',
    '4:5-4:8: val',
    '4:9-4:10: i',
    '4:10-4:11: :',
    '4:12-4:15: int',
    '4:16-4:17: =',
    '4:18-4:19: 1',
    '4:19-4:20: ;',
    '5:5-5:8: val',
    '5:9-5:10: j',
    '5:10-5:11: :',
    '5:12-5:15: int',
    '5:16-5:17: =',
    '5:18-5:19: 2',
    '5:19-5:20: ;',
    '6:5-6:7: if',
    '6:8-6:9: (',
    '6:9-6:10: (',
    '6:10-6:11: i',
    '6:12-6:13: <',
    '6:14-6:15: j',
    '6:16-6:18: &&',
    '6:19-6:20: i',
    '6:21-6:22: >',
    '6:23-6:24: 0',
    '6:24-6:25: )',
    '6:26-6:28: &&',
    '6:29-6:30: j',
    '6:31-6:32: >',
    '6:33-6:34: 0',
    '6:34-6:35: )',
    '6:36-6:40: then',
    '6:41-6:42: {',
    '7:7-7:10: val',
    '7:11-7:12: a',
    '7:12-7:13: :',
    '7:14-7:17: int',
    '7:18-7:19: =',
    '7:20-7:21: 3',
    '7:21-7:22: ;',
    '8:7-8:10: val',
    '8:11-8:12: b',
    '8:12-8:13: :',
    '8:14-8:17: int',
    '8:18-8:19: =',
    '8:20-8:21: 4',
    '8:21-8:22: ;',
    '9:7-9:9: if',
    '9:10-9:11: (',
    '9:11-9:12: a',
    '9:13-9:14: >',
    '9:15-9:16: b',
    '9:17-9:19: ||',
    '9:20-9:21: a',
    '9:22-9:23: +',
    '9:24-9:25: b',
    '9:26-9:27: >',
    '9:28-9:29: 0',
    '9:30-9:32: &&',
    '9:33-9:37: true',
    '9:37-9:38: )',
    '9:39-9:43: then',
    '9:44-9:51: println',
    '9:51-9:52: (',
    '9:52-9:57: "one"',
    '9:57-9:58: )',
    '9:59-9:63: else',
    '9:64-9:71: println',
    '9:71-9:72: (',
    '9:72-9:77: "two"',
    '9:77-9:78: )',
    '10:5-10:6: }',
    '10:7-10:11: else',
    '10:12-10:13: {',
    '11:7-11:10: val',
    '11:11-11:12: a',
    '11:12-11:13: :',
    '11:14-11:17: int',
    '11:18-11:19: =',
    '11:20-11:21: 3',
    '11:21-11:22: ;',
    '12:7-12:10: val',
    '12:11-12:12: b',
    '12:12-12:13: :',
    '12:14-12:17: int',
    '12:18-12:19: =',
    '12:20-12:21: 4',
    '12:21-12:22: ;',
    '13:7-13:9: if',
    '13:10-13:11: (',
    '13:11-13:12: a',
    '13:13-13:15: ==',
    '13:16-13:17: 2',
    '13:18-13:20: ||',
    '13:21-13:22: b',
    '13:23-13:25: ==',
    '13:26-13:27: 4',
    '13:27-13:28: )',
    '13:29-13:33: then',
    '13:34-13:35: {',
    '13:36-13:43: println',
    '13:43-13:44: (',
    '13:44-13:51: "three"',
    '13:51-13:52: )',
    '13:53-13:54: }',
    '13:55-13:59: else',
    '13:60-13:61: {',
    '13:62-13:69: println',
    '13:69-13:70: (',
    '13:70-13:76: "four"',
    '13:76-13:77: )',
    '13:78-13:79: }',
    '14:5-14:6: }',
    '15:3-15:4: }',
    '17:1-17:2: }',
  ]);
});

it('lexSamlangProgram good test 2', () => {
  expect(
    lex(`
class Foo(val a: int) { function bar(): int = 3  }

class Option<T>(None(unit), Some(T)) {
  function matchExample(opt: Option<int>): int = match (opt) { | None _ -> 42 | Some a -> a }

}

class Obj(val d: int, val e: int) {
  function valExample(): int = {
    val a: int = 1;
    val b: int = 2;
    val [_, c]: [string * int] = ["dd", 3];
    val { e as d }: Obj = { d: 5, e: 4 };
    val _: int = 42;
    a + (b * c) / d
  }

}

class Main {
  function identity(a: int): int = a

  function random(): int = {
    val a: int = 42;
    a
  }

  function oof(): int = 14

  function div(a: int, b: int): int =
    if (b == 0) then panic("Division by zero is illegal!") else a / b

  function nestedVal(): int = {
    val a: int = {
      val b: int = 4;
      val c: int = {
        val c: int = b;
        b
      };
      c
    };
    val [e, b, _]: [int * string * bool] = [1, "bool", true];
    a + 1
  }

  function main(): unit =
    println(
      intToString(
        Main.identity(
          (((Foo.bar() * Main.oof()) * Obj.valExample()) / Main.div(4, 2) + Main.nestedVal()) - 5
        )
      )
    )

}
`)
  ).toEqual([
    '2:1-2:6: class',
    '2:7-2:10: Foo',
    '2:10-2:11: (',
    '2:11-2:14: val',
    '2:15-2:16: a',
    '2:16-2:17: :',
    '2:18-2:21: int',
    '2:21-2:22: )',
    '2:23-2:24: {',
    '2:25-2:33: function',
    '2:34-2:37: bar',
    '2:37-2:38: (',
    '2:38-2:39: )',
    '2:39-2:40: :',
    '2:41-2:44: int',
    '2:45-2:46: =',
    '2:47-2:48: 3',
    '2:50-2:51: }',
    '4:1-4:6: class',
    '4:7-4:13: Option',
    '4:13-4:14: <',
    '4:14-4:15: T',
    '4:15-4:16: >',
    '4:16-4:17: (',
    '4:17-4:21: None',
    '4:21-4:22: (',
    '4:22-4:26: unit',
    '4:26-4:27: )',
    '4:27-4:28: ,',
    '4:29-4:33: Some',
    '4:33-4:34: (',
    '4:34-4:35: T',
    '4:35-4:36: )',
    '4:36-4:37: )',
    '4:38-4:39: {',
    '5:3-5:11: function',
    '5:12-5:24: matchExample',
    '5:24-5:25: (',
    '5:25-5:28: opt',
    '5:28-5:29: :',
    '5:30-5:36: Option',
    '5:36-5:37: <',
    '5:37-5:40: int',
    '5:40-5:41: >',
    '5:41-5:42: )',
    '5:42-5:43: :',
    '5:44-5:47: int',
    '5:48-5:49: =',
    '5:50-5:55: match',
    '5:56-5:57: (',
    '5:57-5:60: opt',
    '5:60-5:61: )',
    '5:62-5:63: {',
    '5:64-5:65: |',
    '5:66-5:70: None',
    '5:71-5:72: _',
    '5:73-5:75: ->',
    '5:76-5:78: 42',
    '5:79-5:80: |',
    '5:81-5:85: Some',
    '5:86-5:87: a',
    '5:88-5:90: ->',
    '5:91-5:92: a',
    '5:93-5:94: }',
    '7:1-7:2: }',
    '9:1-9:6: class',
    '9:7-9:10: Obj',
    '9:10-9:11: (',
    '9:11-9:14: val',
    '9:15-9:16: d',
    '9:16-9:17: :',
    '9:18-9:21: int',
    '9:21-9:22: ,',
    '9:23-9:26: val',
    '9:27-9:28: e',
    '9:28-9:29: :',
    '9:30-9:33: int',
    '9:33-9:34: )',
    '9:35-9:36: {',
    '10:3-10:11: function',
    '10:12-10:22: valExample',
    '10:22-10:23: (',
    '10:23-10:24: )',
    '10:24-10:25: :',
    '10:26-10:29: int',
    '10:30-10:31: =',
    '10:32-10:33: {',
    '11:5-11:8: val',
    '11:9-11:10: a',
    '11:10-11:11: :',
    '11:12-11:15: int',
    '11:16-11:17: =',
    '11:18-11:19: 1',
    '11:19-11:20: ;',
    '12:5-12:8: val',
    '12:9-12:10: b',
    '12:10-12:11: :',
    '12:12-12:15: int',
    '12:16-12:17: =',
    '12:18-12:19: 2',
    '12:19-12:20: ;',
    '13:5-13:8: val',
    '13:9-13:10: [',
    '13:10-13:11: _',
    '13:11-13:12: ,',
    '13:13-13:14: c',
    '13:14-13:15: ]',
    '13:15-13:16: :',
    '13:17-13:18: [',
    '13:18-13:24: string',
    '13:25-13:26: *',
    '13:27-13:30: int',
    '13:30-13:31: ]',
    '13:32-13:33: =',
    '13:34-13:35: [',
    '13:35-13:39: "dd"',
    '13:39-13:40: ,',
    '13:41-13:42: 3',
    '13:42-13:43: ]',
    '13:43-13:44: ;',
    '14:5-14:8: val',
    '14:9-14:10: {',
    '14:11-14:12: e',
    '14:13-14:15: as',
    '14:16-14:17: d',
    '14:18-14:19: }',
    '14:19-14:20: :',
    '14:21-14:24: Obj',
    '14:25-14:26: =',
    '14:27-14:28: {',
    '14:29-14:30: d',
    '14:30-14:31: :',
    '14:32-14:33: 5',
    '14:33-14:34: ,',
    '14:35-14:36: e',
    '14:36-14:37: :',
    '14:38-14:39: 4',
    '14:40-14:41: }',
    '14:41-14:42: ;',
    '15:5-15:8: val',
    '15:9-15:10: _',
    '15:10-15:11: :',
    '15:12-15:15: int',
    '15:16-15:17: =',
    '15:18-15:20: 42',
    '15:20-15:21: ;',
    '16:5-16:6: a',
    '16:7-16:8: +',
    '16:9-16:10: (',
    '16:10-16:11: b',
    '16:12-16:13: *',
    '16:14-16:15: c',
    '16:15-16:16: )',
    '16:17-16:18: /',
    '16:19-16:20: d',
    '17:3-17:4: }',
    '19:1-19:2: }',
    '21:1-21:6: class',
    '21:7-21:11: Main',
    '21:12-21:13: {',
    '22:3-22:11: function',
    '22:12-22:20: identity',
    '22:20-22:21: (',
    '22:21-22:22: a',
    '22:22-22:23: :',
    '22:24-22:27: int',
    '22:27-22:28: )',
    '22:28-22:29: :',
    '22:30-22:33: int',
    '22:34-22:35: =',
    '22:36-22:37: a',
    '24:3-24:11: function',
    '24:12-24:18: random',
    '24:18-24:19: (',
    '24:19-24:20: )',
    '24:20-24:21: :',
    '24:22-24:25: int',
    '24:26-24:27: =',
    '24:28-24:29: {',
    '25:5-25:8: val',
    '25:9-25:10: a',
    '25:10-25:11: :',
    '25:12-25:15: int',
    '25:16-25:17: =',
    '25:18-25:20: 42',
    '25:20-25:21: ;',
    '26:5-26:6: a',
    '27:3-27:4: }',
    '29:3-29:11: function',
    '29:12-29:15: oof',
    '29:15-29:16: (',
    '29:16-29:17: )',
    '29:17-29:18: :',
    '29:19-29:22: int',
    '29:23-29:24: =',
    '29:25-29:27: 14',
    '31:3-31:11: function',
    '31:12-31:15: div',
    '31:15-31:16: (',
    '31:16-31:17: a',
    '31:17-31:18: :',
    '31:19-31:22: int',
    '31:22-31:23: ,',
    '31:24-31:25: b',
    '31:25-31:26: :',
    '31:27-31:30: int',
    '31:30-31:31: )',
    '31:31-31:32: :',
    '31:33-31:36: int',
    '31:37-31:38: =',
    '32:5-32:7: if',
    '32:8-32:9: (',
    '32:9-32:10: b',
    '32:11-32:13: ==',
    '32:14-32:15: 0',
    '32:15-32:16: )',
    '32:17-32:21: then',
    '32:22-32:27: panic',
    '32:27-32:28: (',
    '32:28-32:58: "Division by zero is illegal!"',
    '32:58-32:59: )',
    '32:60-32:64: else',
    '32:65-32:66: a',
    '32:67-32:68: /',
    '32:69-32:70: b',
    '34:3-34:11: function',
    '34:12-34:21: nestedVal',
    '34:21-34:22: (',
    '34:22-34:23: )',
    '34:23-34:24: :',
    '34:25-34:28: int',
    '34:29-34:30: =',
    '34:31-34:32: {',
    '35:5-35:8: val',
    '35:9-35:10: a',
    '35:10-35:11: :',
    '35:12-35:15: int',
    '35:16-35:17: =',
    '35:18-35:19: {',
    '36:7-36:10: val',
    '36:11-36:12: b',
    '36:12-36:13: :',
    '36:14-36:17: int',
    '36:18-36:19: =',
    '36:20-36:21: 4',
    '36:21-36:22: ;',
    '37:7-37:10: val',
    '37:11-37:12: c',
    '37:12-37:13: :',
    '37:14-37:17: int',
    '37:18-37:19: =',
    '37:20-37:21: {',
    '38:9-38:12: val',
    '38:13-38:14: c',
    '38:14-38:15: :',
    '38:16-38:19: int',
    '38:20-38:21: =',
    '38:22-38:23: b',
    '38:23-38:24: ;',
    '39:9-39:10: b',
    '40:7-40:8: }',
    '40:8-40:9: ;',
    '41:7-41:8: c',
    '42:5-42:6: }',
    '42:6-42:7: ;',
    '43:5-43:8: val',
    '43:9-43:10: [',
    '43:10-43:11: e',
    '43:11-43:12: ,',
    '43:13-43:14: b',
    '43:14-43:15: ,',
    '43:16-43:17: _',
    '43:17-43:18: ]',
    '43:18-43:19: :',
    '43:20-43:21: [',
    '43:21-43:24: int',
    '43:25-43:26: *',
    '43:27-43:33: string',
    '43:34-43:35: *',
    '43:36-43:40: bool',
    '43:40-43:41: ]',
    '43:42-43:43: =',
    '43:44-43:45: [',
    '43:45-43:46: 1',
    '43:46-43:47: ,',
    '43:48-43:54: "bool"',
    '43:54-43:55: ,',
    '43:56-43:60: true',
    '43:60-43:61: ]',
    '43:61-43:62: ;',
    '44:5-44:6: a',
    '44:7-44:8: +',
    '44:9-44:10: 1',
    '45:3-45:4: }',
    '47:3-47:11: function',
    '47:12-47:16: main',
    '47:16-47:17: (',
    '47:17-47:18: )',
    '47:18-47:19: :',
    '47:20-47:24: unit',
    '47:25-47:26: =',
    '48:5-48:12: println',
    '48:12-48:13: (',
    '49:7-49:18: intToString',
    '49:18-49:19: (',
    '50:9-50:13: Main',
    '50:13-50:14: .',
    '50:14-50:22: identity',
    '50:22-50:23: (',
    '51:11-51:12: (',
    '51:12-51:13: (',
    '51:13-51:14: (',
    '51:14-51:17: Foo',
    '51:17-51:18: .',
    '51:18-51:21: bar',
    '51:21-51:22: (',
    '51:22-51:23: )',
    '51:24-51:25: *',
    '51:26-51:30: Main',
    '51:30-51:31: .',
    '51:31-51:34: oof',
    '51:34-51:35: (',
    '51:35-51:36: )',
    '51:36-51:37: )',
    '51:38-51:39: *',
    '51:40-51:43: Obj',
    '51:43-51:44: .',
    '51:44-51:54: valExample',
    '51:54-51:55: (',
    '51:55-51:56: )',
    '51:56-51:57: )',
    '51:58-51:59: /',
    '51:60-51:64: Main',
    '51:64-51:65: .',
    '51:65-51:68: div',
    '51:68-51:69: (',
    '51:69-51:70: 4',
    '51:70-51:71: ,',
    '51:72-51:73: 2',
    '51:73-51:74: )',
    '51:75-51:76: +',
    '51:77-51:81: Main',
    '51:81-51:82: .',
    '51:82-51:91: nestedVal',
    '51:91-51:92: (',
    '51:92-51:93: )',
    '51:93-51:94: )',
    '51:95-51:96: -',
    '51:97-51:98: 5',
    '52:9-52:10: )',
    '53:7-53:8: )',
    '54:5-54:6: )',
    '56:1-56:2: }',
  ]);
});

it('lexSamlangProgram comment lexing test', () => {
  expect(
    lex(`
class Main {
  function main(): unit = {
    val i: int = 1;
    val j: int = 2;
    /* block comment lol
    ol ol
    0000l */
    / not a line comment
    // line comment haha
    /*
  }
}
`)
  ).toEqual([
    '2:1-2:6: class',
    '2:7-2:11: Main',
    '2:12-2:13: {',
    '3:3-3:11: function',
    '3:12-3:16: main',
    '3:16-3:17: (',
    '3:17-3:18: )',
    '3:18-3:19: :',
    '3:20-3:24: unit',
    '3:25-3:26: =',
    '3:27-3:28: {',
    '4:5-4:8: val',
    '4:9-4:10: i',
    '4:10-4:11: :',
    '4:12-4:15: int',
    '4:16-4:17: =',
    '4:18-4:19: 1',
    '4:19-4:20: ;',
    '5:5-5:8: val',
    '5:9-5:10: j',
    '5:10-5:11: :',
    '5:12-5:15: int',
    '5:16-5:17: =',
    '5:18-5:19: 2',
    '5:19-5:20: ;',
    `6:5-8:12: /* block comment lol
    ol ol
    0000l *`,
    '8:12-8:13: /',
    '9:5-9:6: /',
    '9:7-9:10: not',
    '9:11-9:12: a',
    '9:13-9:17: line',
    '9:18-9:25: comment',
    '10:5-10:25: // line comment haha',
    '11:5-11:6: /',
    '11:6-11:7: *',
    '12:3-12:4: }',
    '13:1-13:2: }',
  ]);
});

it('lexSamlangProgram string end escaping test', () => {
  expect(lex(`"abcdefg\\\\\\\\"`)).toEqual(['1:1-1:14: "abcdefg\\\\\\\\"']);
  expect(lex(`"abcdefg\\\\\\"`)).toEqual(['1:1-1:13: ERROR: "abcdefg\\\\\\"']);
});

it('lexSamlangProgram string mid escaping good tests', () => {
  expect(lex(`"abcdefg\\t"`)).toEqual(['1:1-1:12: "abcdefg\\t"']);
  expect(lex(`"abcdefg\\f"`)).toEqual(['1:1-1:12: "abcdefg\\f"']);
  expect(lex(`"abcdefg\\r"`)).toEqual(['1:1-1:12: "abcdefg\\r"']);
  expect(lex(`"abcdefg\\n"`)).toEqual(['1:1-1:12: "abcdefg\\n"']);
  expect(lex(`"abcdefg\\b"`)).toEqual(['1:1-1:12: "abcdefg\\b"']);
  expect(lex(`"abcdefg\\0"`)).toEqual(['1:1-1:12: "abcdefg\\0"']);
});

it('lexSamlangProgram string mid escaping bad tests', () => {
  expect(lex(`"abcdefg\\a"`)).toEqual(['1:1-1:12: ERROR: "abcdefg\\a"']);
  expect(lex(`"abcdefg\\c"`)).toEqual(['1:1-1:12: ERROR: "abcdefg\\c"']);
});

it('lexSamlangProgram bad multiple string', () => {
  expect(lex(`"abcdefg\n"`)).toEqual(['1:1-1:9: ERROR: "abcdefg', '2:1-2:2: ERROR: "']);
});

it('lexSamlangProgram min-int test 1', () => {
  expect(lex('9223372036854775809')).toEqual(['1:1-1:20: ERROR: 9223372036854775809']);
});

it('lexSamlangProgram min-int test 2', () => {
  expect(lex('9223372036854775808')).toEqual(['1:1-1:20: ERROR: 9223372036854775808']);
  expect(lex('9223372036854775808 3')).toEqual([
    '1:1-1:20: ERROR: 9223372036854775808',
    '1:21-1:22: 3',
  ]);
});

it('lexSamlangProgram min-int test 3', () => {
  expect(lex('+ 9223372036854775808')).toEqual([
    '1:1-1:2: +',
    '1:3-1:22: ERROR: 9223372036854775808',
  ]);
});

it('lexSamlangProgram min-int test 4', () => {
  expect(lex('-9223372036854775808')).toEqual(['1:2-1:21: -9223372036854775808']);
});

it('lexSamlangProgram identifier test', () => {
  expect(lex('fooBar')).toEqual(['1:1-1:7: fooBar']);
});

it('lexSamlangProgram garbage test', () => {
  expect(lex('$php_is_a_bad_language 123456')).toEqual([
    '1:1-1:23: ERROR: $php_is_a_bad_language',
    '1:24-1:30: 123456',
  ]);
});
