import { ForTests } from tests.StdLib;

class Math {
  function plus(a: int, b: int): int = a + b
}

class Student(val name: Str, val age: int) {
  method getName(): Str = this.name

  method getAge(): int = this.age

  function dummyStudent(): Student = Student.init("RANDOM_BABY", 0)
}

class PrimitiveType(U(bool), I(int), S(Str), B(bool)) {
  function getUnit(): PrimitiveType = PrimitiveType.U(false)

  function getInteger(): PrimitiveType = PrimitiveType.I(42)

  function getString(): PrimitiveType = PrimitiveType.S("Answer to life, universe, and everything.")

  function getBool(): PrimitiveType = PrimitiveType.B(false)

  method isTruthy(): bool =
    match this {
      U(_) -> false,
      I(i) -> i != 0,
      S(s) -> s != "",
      B(b) -> b,
    }
}

class FunctionExample {
  function <T> getIdentityFunction(): (T) -> T = (x: T) -> x
}

class Box<T>(val content: T) {
  method getContent(): T = {
    let { content }: Box<T> = this;
    content
  }
}

class Option<T>(None(unit), Some(T)) {
  function <T> getNone(): Option<T> = Option.None({  })

  function <T> getSome(d: T): Option<T> = Option.Some(d)

  function deepForceValue(opt: Option<Option<Option<Box<int>>>>): int =
    if let Some(Some(Some({ content }))) = opt then { content } else {
      Process.panic("cannot force")
    }

  method forceValue(): T =
    match this {
      None(_) -> Process.panic("Trying to get value from Option.None"),
      Some(v) -> v,
    }

  method <R> map(f: (T) -> R): Option<R> =
    match this {
      None(_) -> Option.None({  }),
      Some(d) -> Option.Some(f(d)),
    }
}

class DifferentModulesDemo {
  private function assertTrue(condition: bool, message: Str): unit =
    if condition then {  } else Process.panic(message)

  private function assertFalse(condition: bool, message: Str): unit =
    if !condition then {  } else Process.panic(message)

  function run(): unit = {
    let _ = ForTests.assertIntEquals(Option.getSome(3).map((i: int) -> i + 1).forceValue(), 4);
    let _ = ForTests.assertIntEquals(
      Option.deepForceValue(Option.getSome(Option.getSome(Option.getSome(Box.init(42))))),
      42
    );
    let _ = ForTests.assertIntEquals(Box.init(42).getContent(), 42);
    let _ = ForTests.assertIntEquals(FunctionExample.getIdentityFunction<int>()(42), 42);
    let _ = ForTests.assertIntEquals(Student.dummyStudent().getAge(), 0);
    let _ = ForTests.assertIntEquals(Math.plus(2, 2), 4);
    let _ = DifferentModulesDemo.assertFalse(PrimitiveType.getUnit().isTruthy(), "Ah6");
    let _ = DifferentModulesDemo.assertTrue(PrimitiveType.getInteger().isTruthy(), "Ah7");
    let _ = DifferentModulesDemo.assertTrue(PrimitiveType.getString().isTruthy(), "Ah8");
    let _ = DifferentModulesDemo.assertFalse(PrimitiveType.getBool().isTruthy(), "Ah9");
  }
}
