import { ForTests } from tests.StdLib

class Math {
  function plus(a: int, b: int): int = a + b
}

class Student(val name: string, val age: int) {
  method getName(): string = this.name

  method getAge(): int = this.age

  function dummyStudent(): Student = { name: "RANDOM_BABY", age: 0 }
}

class PrimitiveType(U(bool), I(int), S(string), B(bool)) {
  function getUnit(): PrimitiveType = PrimitiveType.U(false)

  function getInteger(): PrimitiveType = PrimitiveType.I(42)

  function getString(): PrimitiveType = PrimitiveType.S("Answer to life, universe, and everything.")

  function getBool(): PrimitiveType = PrimitiveType.B(false)

  method isTruthy(): bool =
    match (this) { | U _ -> false | I i -> i != 0 | S s -> s != "" | B b -> b }
}

class FunctionExample {
  function <T> getIdentityFunction(): (T) -> T = (x: T) -> x
}

class Box<T>(val content: T) {
  function <T> create(content: T): Box<T> = { content }

  method getContent(): T = {
    val { content }: Box<T> = this;
    content
  }
}

class Option<T>(None(unit), Some(T)) {
  function <T> getNone(): Option<T> = Option.None({  })

  function <T> getSome(d: T): Option<T> = Option.Some(d)

  method forceValue(): T =
    match (this) {
      | None _ -> Builtins.panic("Trying to get value from Option.None")
      | Some v -> v
    }

  method <R> map(f: (T) -> R): Option<R> =
    match (this) { | None _ -> Option.None({  }) | Some d -> Option.Some(f(d)) }
}

class DifferentModulesDemo {
  private function assertTrue(condition: bool, message: string): unit =
    if (condition) then {  } else Builtins.panic(message)

  private function assertFalse(condition: bool, message: string): unit =
    if (!condition) then {  } else Builtins.panic(message)

  function run(): unit = {
    val _ = ForTests.assertIntEquals(Option.getSome(3).map((i: int) -> i + 1).forceValue(), 4);
    val _ = ForTests.assertIntEquals(Box.create(42).getContent(), 42);
    val _ = ForTests.assertIntEquals(FunctionExample.getIdentityFunction()(42), 42);
    val _ = ForTests.assertIntEquals(Student.dummyStudent().getAge(), 0);
    val _ = ForTests.assertIntEquals(Math.plus(2, 2), 4);
    val _ = DifferentModulesDemo.assertFalse(PrimitiveType.getUnit().isTruthy(), "Ah6");
    val _ = DifferentModulesDemo.assertTrue(PrimitiveType.getInteger().isTruthy(), "Ah7");
    val _ = DifferentModulesDemo.assertTrue(PrimitiveType.getString().isTruthy(), "Ah8");
    val _ = DifferentModulesDemo.assertFalse(PrimitiveType.getBool().isTruthy(), "Ah9");
  }
}
