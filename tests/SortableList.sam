import { Comparable } from std.interfaces;
import { Pair } from std.tuples;

interface Useless {}

class BoxedInt(val i: int) : Comparable<BoxedInt>, Useless {
  method compare(other: BoxedInt): int = this.i - other.i
}

class List<T: Comparable<T>>(Nil, Cons(T, List<T>)) {
  function <T: Comparable<T>> nil(): List<T> = List.Nil<T>()

  function <T: Comparable<T>> of(t: T): List<T> = List.Cons(t, List.Nil<T>())

  method cons(t: T): List<T> = List.Cons(t, this)

  method iter(f: (T) -> unit): unit =
    match this {
      Nil -> {  },
      Cons(v, rest) -> {
        let _ = f(v);
        rest.iter(f)
      },
    }

  method sort(): List<T> =
    match this {
      Nil -> this,
      Cons(_, Nil) -> this,
      Cons(_, Cons(_, _)) -> {
        let (l1, l2) = this.split(List.nil<T>(), List.nil<T>());
        l1.sort().merge(l2.sort())
      },
    }

  private method merge(other: List<T>): List<T> =
    match (this, other) {
      (Nil, _) -> other,
      (_, Nil) -> this,
      (Cons(h1, t1), Cons(h2, t2)) -> {
        if h1.compare(h2) < 0 then t1.merge(other).cons(h1) else t2.merge(this).cons(h2)
      },
    }

  private method split(y: List<T>, z: List<T>): Pair<List<T>, List<T>> =
    match this {
      Nil -> Pair.init(y, z),
      Cons(x, rest) -> rest.split(z, y.cons(x)),
    }
}

class SortableListTest {
  function run(): unit = {
    let list = List.of(BoxedInt.init(4))
      .cons(BoxedInt.init(2))
      .cons(BoxedInt.init(1))
      .cons(BoxedInt.init(3));
    list.sort().iter((n) -> Process.println(Str.fromInt(n.i)))
  }
}
