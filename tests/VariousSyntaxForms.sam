import { Pair, Triple } from std.tuples;
import { ForTests } from tests.StdLib;

class Clazz(val t: Pair<Triple<int, int, bool>, Str>) {
  function of(): Clazz = Clazz.init(((42, 2, false), ""))

  method thisTest(): int = {
    let ((i, _, _), _) = this.t;
    let { t as { e0 as (j, _, _), e1 } } = this;
    i + j
  }
}

class Option<T>(Some(T), None) {
  function <T> none(): Option<T> = Option.None()

  method toSome(t: T): Option<T> = Option.Some(t)

  method isNone(): bool =
    match this {
      None -> true,
      Some(_) -> false,
    }

  method <R> map(f: (T) -> R): Option<R> =
    match this {
      None -> Option.None(),
      Some(t) -> Option.Some(f(t)),
    }

  method <R> mapButIgnore(f: (T) -> R): unit = {
    let _ = match this {
      None -> Option.None<R>(),
      Some(d) -> Option.Some(f(d)),
    };
  }

  function test(): unit = {
    let _ = match Option.None<(Str) -> int>() {
      None -> "",
      Some(f) -> Str.fromInt(f("")),
    };
    let none = Option.None<int>();
    let noneMapped = none.mapButIgnore((it) -> it);
    let _ = Option.Some(noneMapped).mapButIgnore((it) -> it);
    let _ = Option.Some(3).map((x) -> "empty");
  }
}

class List<T>(Nil, Cons(T, List<T>)) {
  function <T> of(t: T): List<T> = List.Cons(t, List.Nil<T>())

  method cons(t: T): List<T> = List.Cons(t, this)
}

class GenericObject<T1, T2>(val v1: T1, val v2: T2) {
  function run(): unit = {
    let f = (v2: int) -> if v2 + 1 == 3 {
      GenericObject.init(3, v2)
    } else {
      GenericObject.init(3, 42)
    };
    let _ = ForTests.assertIntEquals(2, f(2).v2);
    let _ = ForTests.assertIntEquals(42, f(3).v2);
  }
}

class VariousSyntaxForms {
  function literalsAndSimpleExpressions(): unit = {
    let _ = 42;
    let _ = -65536;
    let _ = true;
    let _ = false;
    let _ = !true;
    let _ = !false;
    let _ = "aaa";
    let _ = {  };
  }

  function variables(a: int, b: Str): unit = {
    let c = 3 + a;
    let d = b == b;
    let e = c % c;
  }

  function methodAndFunctionReference(): int = Clazz.of().thisTest()

  function panicTest(reason: Str): Clazz = Process.panic(reason)

  function funTest(): unit = {
    let _ = VariousSyntaxForms.literalsAndSimpleExpressions();
    let _ = VariousSyntaxForms.variables(3, "hi");
    let _ = VariousSyntaxForms.methodAndFunctionReference();
    let _ = VariousSyntaxForms.panicTest("Ah!").thisTest();
    let _ = VariousSyntaxForms.binaryExpressions();
    let _ = VariousSyntaxForms.lambdaTest(3);
    VariousSyntaxForms.funTest()
  }

  function binaryExpressions(): unit = {
    let a: int = 1 * 2 + 3 / 4 % 5 - 6;
    let b: bool = a < a && 1 > 3 || 2 <= 4 && 5 >= 6;
    let c: bool = a == 2;
    let d: bool = VariousSyntaxForms.panicTest("ha") != Clazz.of();
    let e: bool = List.of(3) == List.of(a * 3);
  }

  function lambdaTest(a: int): Str = {
    let b = Option.none<int>().toSome(3).map(VariousSyntaxForms.lambdaTest);
    let c = Option.none<int>().toSome(3).map((x) -> "empty");
    "hello world"
  }

  function run(): unit = {
    let _ = VariousSyntaxForms.literalsAndSimpleExpressions();
    let _ = VariousSyntaxForms.variables(3, "sss");
    let v = VariousSyntaxForms.methodAndFunctionReference();
    let _ = ForTests.assertIntEquals(84, v);
    let _ = GenericObject.run();
  }
}
