import { List } from tests.StdLib
import { AndOrInsideIf } from tests.AndOrInsideIf
import { Benchmark } from tests.Benchmark
import { BlockInIfElse } from tests.BlockInIfElse
import { ConstantFoldingTest } from tests.ConstantFoldingTest
import { DevMeggo } from tests.DevMeggo
import { CSETest } from tests.CSETest
import { DifferentExpressionDemo } from tests.DifferentExpressionDemo
import { DifferentModulesDemo } from tests.DifferentModulesDemo
import { EvaluationOrder } from tests.EvaluationOrder
import { GC } from tests.GC
import { IntToString } from tests.IntToString
import { LoopOptimization } from tests.LoopOptimization
import { MathFunctions } from tests.MathFunctions
import { PrintHelloWorld } from tests.PrintHelloWorld

class TestCase(val name: string, val runner: () -> unit) {
  function of(name: string, runner: () -> unit): TestCase = { name, runner }

  method run(): unit = {
    val { name, runner } = this;
    val _ = Builtins.println("========================================");
    val _ = Builtins.println("Test Name: " :: name);
    val _ = runner();
  }
}

class Main {
  private function getTests(): List<TestCase> =
    List.of(TestCase.of("AndOrInsideIf", AndOrInsideIf.run)).cons(
      TestCase.of("Benchmark", Benchmark.run)
    ).cons(TestCase.of("BlockInIfElse", BlockInIfElse.run)).cons(
      TestCase.of("ConstantFoldingTest", ConstantFoldingTest.run)
    ).cons(TestCase.of("CSETest", CSETest.run)).cons(TestCase.of("DevMeggo", DevMeggo.run)).cons(
      TestCase.of("DifferentExpressionDemo", DifferentExpressionDemo.run)
    ).cons(TestCase.of("DifferentModulesDemo", DifferentModulesDemo.run)).cons(
      TestCase.of("EvaluationOrder", EvaluationOrder.run)
    ).cons(TestCase.of("GC", GC.run)).cons(TestCase.of("IntToString", IntToString.run)).cons(
      TestCase.of("LoopOptimization", LoopOptimization.run)
    ).cons(TestCase.of("MathFunctions", MathFunctions.run)).cons(
      TestCase.of("PrintHelloWorld", PrintHelloWorld.run)
    ).reverse()

  function main(): unit = {
    val _ = Main.getTests().iter((test) -> test.run());
    Builtins.println("========================================")
  }
}
