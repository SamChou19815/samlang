import { List } from std.list;
import { AndOrInsideIf } from tests.AndOrInsideIf;
import { Benchmark } from tests.Benchmark;
import { BlockInIfElse } from tests.BlockInIfElse;
import { CSETest } from tests.CSETest;
import { ConstantFoldingTest } from tests.ConstantFoldingTest;
import { DevMeggo } from tests.DevMeggo;
import { DifferentExpressionDemo } from tests.DifferentExpressionDemo;
import { DifferentModulesDemo } from tests.DifferentModulesDemo;
import { EvaluationOrder } from tests.EvaluationOrder;
import { GC } from tests.GC;
import { IntToString } from tests.IntToString;
import { LoopOptimization } from tests.LoopOptimization;
import { MapTests } from tests.MapTests;
import { MathFunctions } from tests.MathFunctions;
import { PrintHelloWorld } from tests.PrintHelloWorld;
import { SortableListTest } from tests.SortableList;

class TestCase(val name: Str, val runner: () -> unit) {
  method run(): unit = {
    let { name, runner } = this;
    let _ = Process.println("========================================");
    let _ = Process.println("Test Name: " :: name);
    let _ = runner();
  }
}

class Main {
  private function getTests(): List<TestCase> =
    List.nil<TestCase>()
      .cons(TestCase.init("AndOrInsideIf", AndOrInsideIf.run))
      .cons(TestCase.init("Benchmark", Benchmark.run))
      .cons(TestCase.init("BlockInIfElse", BlockInIfElse.run))
      .cons(TestCase.init("ConstantFoldingTest", ConstantFoldingTest.run))
      .cons(TestCase.init("CSETest", CSETest.run))
      .cons(TestCase.init("DevMeggo", DevMeggo.run))
      .cons(TestCase.init("DifferentExpressionDemo", DifferentExpressionDemo.run))
      .cons(TestCase.init("DifferentModulesDemo", DifferentModulesDemo.run))
      .cons(TestCase.init("EvaluationOrder", EvaluationOrder.run))
      .cons(TestCase.init("GC", GC.run))
      .cons(TestCase.init("IntToString", IntToString.run))
      .cons(TestCase.init("LoopOptimization", LoopOptimization.run))
      .cons(TestCase.init("MapTests", MapTests.run))
      .cons(TestCase.init("MathFunctions", MathFunctions.run))
      .cons(TestCase.init("PrintHelloWorld", PrintHelloWorld.run))
      .cons(TestCase.init("SortableList", SortableListTest.run))
      .reverse()

  function main(): unit = {
    let _ = Main.getTests().iter((test) -> test.run());
    Process.println("========================================")
  }
}
