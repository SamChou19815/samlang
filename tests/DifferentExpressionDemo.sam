import { List } from std.list;
import { Option } from std.option;
import { ForTests } from tests.StdLib;

class Foo(val a: int) {
  function bar(): int = 3

  function matchExample(opt: Option<int>): int =
    match opt {
      None -> 42,
      Some(a) -> a,
    }
}

class FooOrFoo(F1(Foo), F2(Foo)) {
  function f1(): FooOrFoo = FooOrFoo.F1(Foo.init(1))

  function f2(): FooOrFoo = FooOrFoo.F2(Foo.init(2))

  function intValue(): int = FooOrFoo.f1().getInt() + FooOrFoo.f2().getInt()

  method getInt(): int =
    match this {
      F1(foo) -> foo.a,
      F2(foo) -> foo.a,
    }
}

class Obj(val d: int, val e: int) {
  function valExample(): int = {
    let a: int = 1;
    let b: int = 2;
    let c = 3;
    let { d as _, e as d }: Obj = Obj.init(5, 4);
    let _: int = 42;
    a + b * c / d
  }
}

class Clazz(val t: int) {
  function of(): Clazz = Clazz.init(42)

  method thisTest(): int = {
    let i = this.t;
    let { t as j } = this;
    let { t as _ } = this;
    let (_) = this;
    let (k) = this;
    i + j + k - k
  }
}

class DifferentExpressionDemo {
  function identity(a: int): int = a

  function random(): int = {
    let { e0, e1, e2 as (e3, _) } = (1, 2, (1, 3));
    let a = 42;
    a
  }

  function oof(): int = 14

  function div(a: int, b: int): int =
    if b == 0 { Process.panic("Division by zero is illegal!") } else { a / b }

  function nestedVal(): int = {
    let a: int = {
      let b: int = 4;
      let c: int = {
        let c: int = b;
        b
      };
      c
    };
    a + 1
  }

  function methodAndFunctionReference(): int = Clazz.of().thisTest()

  function <V, T> toSome(option: Option<V>, t: T): Option<T> = Option.Some(t)

  function lambdaTest(a: int): Str = {
    let c = DifferentExpressionDemo.toSome(Option.None<int>(), 3).map((x: int) -> "empty");
    "hello world"
  }

  function run(): unit = {
    let c = DifferentExpressionDemo.lambdaTest;
    let _ = c(3);
    let v = DifferentExpressionDemo.methodAndFunctionReference();
    let _ = ForTests.assertIntEquals(84, v);
    let _ = ForTests.assertIntEquals(
      42,
      DifferentExpressionDemo.identity(
        Foo.bar() * DifferentExpressionDemo.oof() * Obj.valExample() / DifferentExpressionDemo.div(
          4,
          2
        ) + DifferentExpressionDemo.nestedVal() - 5
      )
    );
  }
}
