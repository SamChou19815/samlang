import { List, Option } from stdlib.utils;
import { ForTests } from tests.StdLib;

class Foo(val a: int) {
  function bar(): int = 3
}

class Obj(val d: int, val e: int) {
  function valExample(): int = {
    val a: int = 1;
    val b: int = 2;
    val c = 3;
    val { e as d }: Obj = Obj.init(5, 4);
    val _: int = 42;
    a + b * c / d
  }
}

class Clazz(val t: int) {
  function of(): Clazz = Clazz.init(42)

  method thisTest(): int = {
    val i: int = this.t;
    val { t as j }: Clazz = this;
    i + j
  }
}

class DifferentExpressionDemo {
  function identity(a: int): int = a

  function random(): int = {
    val a: int = 42;
    a
  }

  function oof(): int = 14

  function div(a: int, b: int): int =
    if b == 0 then Builtins.panic("Division by zero is illegal!") else a / b

  function nestedVal(): int = {
    val a: int = {
      val b: int = 4;
      val c: int = {
        val c: int = b;
        b
      };
      c
    };
    a + 1
  }

  function methodAndFunctionReference(): int = Clazz.of().thisTest()

  function <V, T> toSome(option: Option<V>, t: T): Option<T> = Option.Some(t)

  function lambdaTest(a: int): Str = {
    val c = DifferentExpressionDemo.toSome(Option.None<int>({  }), 3).map((x: int) -> "empty");
    "hello world"
  }

  function run(): unit = {
    val c = DifferentExpressionDemo.lambdaTest;
    val _ = c(3);
    val v = DifferentExpressionDemo.methodAndFunctionReference();
    val _ = ForTests.assertIntEquals(84, v);
    val _ = ForTests.assertIntEquals(
      42,
      DifferentExpressionDemo.identity(
        Foo.bar() * DifferentExpressionDemo.oof() * Obj.valExample() / DifferentExpressionDemo.div(
          4,
          2
        ) + DifferentExpressionDemo.nestedVal() - 5
      )
    );
  }
}
