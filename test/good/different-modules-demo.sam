// ERROR_COUNT: 0

class Math {
    function plus(a: int, b: int): int = a + b
    function cosine(angleInDegree: int): int = panic("Not supported!")
}

class Student(val name: string, val age: int) {
    method getName(): string = this.name
    method getAge(): int = this.age
    function dummyStudent(): Student = { name: "RANDOM_BABY", age: 0 }
}

class PrimitiveType(
    U(bool),
    I(int),
    S(string),
    B(bool),
) {
    // some random functions
    function getUnit(): PrimitiveType = U(false)
    function getInteger(): PrimitiveType = I(42)
    function getString(): PrimitiveType = S("Answer to life, universe, and everything.")
    function getBool(): PrimitiveType = B(false)

    // pattern matching!
    method isTruthy(): bool =
        match (this) {
            | U _ -> false
            | I i -> i != 0
            | S s -> s != ""
            | B b -> b
        }
}

class FunctionExample {
    function <T> getIdentityFunction(): (T) -> T = (x) -> x
}

class Box<T>(val content: T) {
    function <T> init(content: T): Box<T> = { content } // object short hand syntax
    method getContent(): T = {
        val { content } = this; content
    }
}

class Option<T>(None(unit), Some(T)) {
    function <T> getNone(): Option<T> = None({})
    function <T> getSome(d: T): Option<T> = Some(d)
    method <R> map(f: (T) -> R): Option<R> =
        match (this) {
            | None _ -> None({})
            | Some d -> Some(f(d))
        }
}
