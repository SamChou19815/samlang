// ERROR_COUNT: 0

class Option<T>(None(unit), Some(T)) {
  method <R> mapButIgnore(f: (T) -> R): unit = {
    val _ = match (this) {
      // Resolved to Option<UNDECIDED>
      | None _ -> None({})
      // Resolved to Option<R>
      // If the merge process does not go deeper,
      // we will complain that Option<UNDECIDED> != Option<R>,
      // which is bad!
      | Some d -> Some(f(d))
    };
  }

  function main(): unit = {
    val none = None({});
    val _ = Some(none.mapButIgnore((it) -> it)).mapButIgnore((it) -> it);
  }
}

class Main {
  function main(): unit = Option.main()
}
