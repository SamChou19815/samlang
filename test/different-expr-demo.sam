class Foo(val a: int) { function bar(): int = 3  }

class Option<T>(None(unit), Some(T)) {
  function matchExample(opt: Option<int>): int = match (opt) { | None _ -> 42 | Some a -> a }

}

class Obj(val d: int, val e: int) {
  function valExample(): int = {
    val a: int = 1;
    val b: int = 2;
    val [_, c]: [string * int] = ["dd", 3];
    val { e as d }: Obj = { d: 5, e: 4 };
    val _: int = 42;
    a + (b * c) / d
  }

}

class Main {
  function identity(a: int): int = a

  function random(): int = {
    val a: int = 42;
    a
  }

  function oof(): int = 14

  function div(a: int, b: int): int =
    if (b == 0) then panic("Division by zero is illegal!") else a / b

  function nestedVal(): int = {
    val a: int = {
      val b: int = 4;
      val c: int = {
        val c: int = b;
        b
      };
      c
    };
    val [e, b, _]: [int * string * bool] = [1, "bool", true];
    a + 1
  }

  function main(): unit =
    println(
      intToString(
        Main.identity(
          (((Foo.bar() * Main.oof()) * Obj.valExample()) / Main.div(4, 2) + Main.nestedVal()) - 5
        )
      )
    )

}
