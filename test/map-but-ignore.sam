class Option<T>(None(unit), Some(T)) {
  method <R> mapButIgnore(f: (T) -> R): unit = {
    val _: Option<R> = match (this) { | None _ -> None({  }) | Some d -> Some(f(d)) };
  }

  function main(): unit = {
    val none: Option<unit> = None({  });
    val _: unit = Some(none.mapButIgnore((it: unit) -> it)).mapButIgnore((it: unit) -> it);
  }

}

class Main { function main(): unit = Option.main()  }
