// ERROR_COUNT: 12
// illegal-binary-operations.sam:25:33-25:42: [UnexpectedType]: Expected: `() -> int`, actual: `() -> Box<__UNDECIDED__>`.
// illegal-binary-operations.sam:26:28-26:37: [UnexpectedType]: Expected: `() -> int`, actual: `() -> Box<__UNDECIDED__>`.
// illegal-binary-operations.sam:27:35-27:44: [UnexpectedType]: Expected: `() -> int`, actual: `() -> Box<__UNDECIDED__>`.
// illegal-binary-operations.sam:28:44-28:46: [UnexpectedType]: Expected: `Box<__UNDECIDED__>`, actual: `int`.
// illegal-binary-operations.sam:29:29-29:38: [UnexpectedType]: Expected: `() -> bool`, actual: `() -> Box<__UNDECIDED__>`.
// illegal-binary-operations.sam:30:38-30:47: [UnexpectedType]: Expected: `() -> bool`, actual: `() -> Box<__UNDECIDED__>`.
// illegal-binary-operations.sam:31:33-31:38: [UnexpectedType]: Expected: `int`, actual: `bool`.
// illegal-binary-operations.sam:32:28-32:33: [UnexpectedType]: Expected: `int`, actual: `bool`.
// illegal-binary-operations.sam:32:36-32:41: [UnexpectedType]: Expected: `int`, actual: `bool`.
// illegal-binary-operations.sam:34:45-34:51: [UnexpectedType]: Expected: `(int) -> Box<bool>`, actual: `(__UNDECIDED__) -> Box<__UNDECIDED__>`.
// illegal-binary-operations.sam:37:44-37:60: [UnexpectedType]: Expected: `() -> Box<__UNDECIDED__>`, actual: `() -> AnotherBox<__UNDECIDED__>`.
// illegal-binary-operations.sam:40:35-40:41: [UnexpectedType]: Expected: `(Box<Box<bool>>) -> Box<Box<Box<int>>>`, actual: `(__UNDECIDED__) -> Box<__UNDECIDED__>`.

class Box<T>(val value: T) {
  function <T> empty(): Box<T> = { value: panic("PANIC") }
  function <T> of(value: T): Box<T> = { value }
}

class AnotherBox<T>(val value: T) {
  function <T> empty(): AnotherBox<T> = { value: panic("PANIC") }
}

class Main {
  function test01(): int = 42 + Box.empty()
  function test02(): int = Box.empty() + 42
  function test03(): bool = 42 == Box.empty()
  function test04(): bool = Box.empty() == 42
  function test05(): bool = Box.empty() || false
  function test06(): bool = false || Box.empty()
  function test07(): int = 42 * false
  function test08(): int = false + false
  function test09(): bool = Box.of(true) == Box.of(false)
  function test10(): bool = Box.of(true) == Box.of(42)
  function test11(): bool = Box.of(true) == Box.empty()
  function test12(): bool = Box.empty() == Box.of(42)
  function test13(): bool = Box.empty() == AnotherBox.empty()
  function test14(): bool =
    // Deeply nested type inconsistencies
    Box.of(Box.of(Box.of(42))) == Box.of(Box.of(Box.of(false)))
}
