class Clazz(val t: int) {
  function of(): Clazz = { t: 42 }

  method thisTest(): int = {
    val i: int = this.t;
    val { t as j }: Clazz = this;
    i + j
  }

}

class Option<T>(Some(T), None(bool)) {
  function <T> none(): Option<T> = None(true)

  method toSome(t: T): Option<T> = Some(t)

  method isNone(): bool = match (this) { | None _ -> true | Some _ -> false }

  method <R> map(f: (T) -> R): Option<R> =
    match (this) { | None _ -> None(true) | Some t -> Some(f(t)) }

}

class List<T>(Nil(bool), Cons([T * List<T>])) {
  function <T> of(t: T): List<T> = Cons([t, Nil(true)])

  method cons(t: T): List<T> = Cons([t, this])

}

class Main {
  function literalsAndSimpleExpressions(): unit = {
    val _: int = 42;
    val _: int = -65536;
    val _: bool = true;
    val _: bool = false;
    val _: bool = !true;
    val _: bool = !false;
    val _: string = "aaa";
    val _: unit = {  };
  }

  function variables(a: int, b: string): unit = {
    val c: int = 3 + a;
    val d: bool = b == b;
    val e: int = c % c;
  }

  function methodAndFunctionReference(): int = (Clazz.of()).thisTest()

  function panicTest(reason: string): Clazz = panic(reason)

  function functionsTest(): unit = {
    val _: unit = Main.literalsAndSimpleExpressions();
    val _: unit = Main.variables(3, "hi");
    val _: int = Main.methodAndFunctionReference();
    val _: int = (Main.panicTest("Ah!")).thisTest();
    val _: unit = Main.binaryExpressions();
    val _: string = Main.lambdaTest(3);
    Main.functionsTest()
  }

  function binaryExpressions(): unit = {
    val a: int = (1 * 2 + (3 / 4) % 5) - 6;
    val b: bool = a < a && 1 > 3 || 2 <= 4 && 5 >= 6;
    val c: bool = a == 2;
    val d: bool = Main.panicTest("ha") != Clazz.of();
    val e: bool = List.of(3) == List.of(a * 3);
  }

  function lambdaTest(a: int): string = {
    val b: Option<string> = ((Option.none()).toSome(3)).map(Main.lambdaTest);
    val c: Option<string> = ((Option.none()).toSome(3)).map((x: int) -> "empty");
    "hello world"
  }

  function main(): unit = {
    val _: unit = Main.literalsAndSimpleExpressions();
    val _: unit = Main.variables(3, "sss");
    val v: int = Main.methodAndFunctionReference();
    println(intToString(v))
  }

}
