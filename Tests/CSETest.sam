import { ForTests } from Tests.StdLib

class CSETest {
  private function test1(a: int, b: int, c: int, d: int, e: int): unit = {
    val _ = ForTests.assertIntEquals(c, a * b + a + (a * b + a));
    val _ = ForTests.assertIntEquals(d, a * b);
    val _ = ForTests.assertIntEquals(e, a * b + a);
  }

  private function test2(first: bool, a: int, b: int, aTimesB: int): unit = {
    val t = if (first) then a * b else a * b;
    ForTests.assertIntEquals(aTimesB, a * b)
  }

  private function log(x: int, b: int): int =
    if (x <= 0) then 0 else if (x <= b) then 1 else if (x <= b * b) then 2 else if (
      x <= b * b * b
    ) then 3 else if (x <= b * b * b * b) then 4 else if (x <= b * b * b * b * b) then 5 else if (
      x <= b * b * b * b * b * b
    ) then 6 else if (x <= b * b * b * b * b * b * b) then 7 else if (
      x <= b * b * b * b * b * b * b * b
    ) then 8 else if (x <= b * b * b * b * b * b * b * b * b) then 9 else if (
      x <= b * b * b * b * b * b * b * b * b * b
    ) then 10 else 10 + CSETest.log(x / (b * b * b * b * b * b * b * b * b * b), b)

  private function plusLog2(acc: int, i: int): int = acc + CSETest.log(i, 2)

  private function test3(acc: int, i: int): int =
    if (i >= 300) then acc else CSETest.test3(acc + CSETest.log(i, 2), i + 1)

  private function test4(totalPicograms: int, i: int): int = {
    val maxLong = 92233720;
    if (i >= 300) then totalPicograms else {
      val megagrams = maxLong - i;
      val kilograms = megagrams / 1000;
      val grams = megagrams / 1000 / 1000;
      val milligrams = megagrams / 1000 / 1000 / 1000;
      CSETest.test4(kilograms + grams + milligrams, i + 1)
    }
  }

  private function test5(totalOddNumbers: int, i: int): int = {
    if (i >= 300) then totalOddNumbers else {
      val iMod64: int = i % 64;
      val iMod32: int = i % 64 % 32;
      val iMod16: int = i % 64 % 32 % 16;
      val iMod8: int = i % 64 % 32 % 16 % 8;
      val iMod4: int = i % 64 % 32 % 16 % 8 % 4;
      val iMod2: int = i % 64 % 32 % 16 % 8 % 4 % 2;
      CSETest.test5(totalOddNumbers + iMod2, i + 1)
    }
  }

  private function test6(first: bool, a: int, b: int, aTimesB: int): unit = {
    val _ = if (first) then {
      val _ = a * b;
    } else {  };
    val _ = ForTests.assertIntEquals(aTimesB, a * b);
  }

  function run(): unit = {
    val _ = CSETest.test1(3, 4, 30, 12, 15);
    val _ = CSETest.test2(true, 3, 4, 12);
    val _ = CSETest.test2(false, 3, 4, 12);
    val _ = ForTests.assertIntEquals(2181, CSETest.test3(0, 0));
    val _ = ForTests.assertIntEquals(92325, CSETest.test4(0, 0));
    val _ = ForTests.assertIntEquals(150, CSETest.test5(0, 0));
    val _ = CSETest.test6(true, 3, 4, 12);
    val _ = CSETest.test6(false, 3, 4, 12);
  }

}
