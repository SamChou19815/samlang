{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SAMLANG",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#constants" },
    { "include": "#types" },
    { "include": "#functions" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.samlang",
          "match": "\\b(val|mut|let|const|as|if|then|else|match|class|interface|public|private|function|method|import|from)\\b"
        },
        { "name": "support.function.builtin", "match": "\\b(panic)\\b" },
        { "name": "keyword.operator.comparison", "match": "(==|!=|<=|>=|<>|<|>)" },
        { "name": "keyword.operator.arithmetic", "match": "(\\-|\\+|\\*|\\/|%)" },
        { "name": "keyword.operator", "match": "(->)" },
        { "name": "keyword.operator.assignment", "match": "(=)" }
      ]
    },
    "strings": {
      "name": "string.quoted.double.samlang",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.samlang",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        { "name": "comment.line", "match": "//(.*)" },
        { "name": "comment.block", "begin": "/\\*", "end": "\\*/" }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)"
        },
        { "name": "constant.language", "match": "\\b(true|false|this)\\b" }
      ]
    },
    "types": {
      "patterns": [{ "name": "support.type", "match": "\\b(unit|int|bool|[A-Z][A-za-z0-9]*)\\b" }]
    },
    "functions": {
      "patterns": [
        {
          "begin": "(function|method)\\s*(<\\w+>)?\\s*([a-z][A-Za-z0-9]*)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "keyword.control.samlang" },
            "3": { "name": "entity.name.function" }
          },
          "end": "\\)",
          "patterns": [{ "include": "#functions" }, { "include": "text.samlang" }]
        }
      ]
    }
  },
  "scopeName": "text.samlang"
}
